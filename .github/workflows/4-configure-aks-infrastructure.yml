name: 4) Configure AKS Infrastructure
permissions:
      id-token: write
      contents: read
on:
  workflow_run:
    workflows: [3) Deploy AKS in Landing Zone Spoke]
    types:
      - completed
  workflow_dispatch:
      
env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }} 
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  LOG_ANALYTICS_WORKSPACE_NAME: eslzlaworkspace
  AKSESLZ_PATH : ./akselz
  DEPLOYMENT_LOCATION: eastus
  DEPLOYMENT_NAME: aks-eslz
  RESOURCE_GROUP: ESLZ-SPOKE
  HUB_RESOURCE_GROUP: ESLZ-HUB
  MANAGED_RESOURCE_GROUP: eslzakscluster-aksInfraRG
  SPOKE_VNET_NAME: VNet-SPOKE
  HUB_VNET_NAME: VNet-HUB
  SPOKE_SUBNET_NAME: servicespe
  CLUSTER_NAME: eslzakscluster
  vmSize: Standard_B4ms
  FIREWALL_NAME: AZFW
  GH_RUNNER_VM_NAME: runner
  AKS_SUBNET_CIDR: 10.1.1.0/24
  APP_GATEWAY_PIP_NAME: APPGW-PIP
  PRIVATE_DNS_NAME: constoso.internal
 
jobs:
  on-success:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: 'DEV'
    name: 'Configure AKS in dev landing zone spoke'
    steps:
    
      - name: Azure Login
        uses: Azure/login@v1
        if: ${{ env.AZURE_CLIENT_ID != '' && env.AZURE_TENANT_ID != '' && env.AZURE_SUBSCRIPTION_ID != ''}}
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          
      - name: Set Environment Variables
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            az config set extension.use_dynamic_install=yes_without_prompt
          
            azureKeyvaultSecretsProviderUserAssignedManagedIdentityClientId="$(az aks addon show --name ${{ env.CLUSTER_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} -a azure-keyvault-secrets-provider --query identity.clientId -o tsv)"
            echo 'azureKeyvaultSecretsProviderUserAssignedManagedIdentityClientId='$azureKeyvaultSecretsProviderUserAssignedManagedIdentityClientId >> $GITHUB_ENV
            
            GH_RUNNER_VM_MANAGED_IDENTITY_PRINCIPAL_ID="$(az resource list -n ${{ env.GH_RUNNER_VM_NAME }} --query [*].identity.principalId --out tsv)"
            echo 'GH_RUNNER_VM_MANAGED_IDENTITY_PRINCIPAL_ID='$GH_RUNNER_VM_MANAGED_IDENTITY_PRINCIPAL_ID >> $GITHUB_ENV
          
            AKS_ID="$(az aks list --resource-group ${{ env.RESOURCE_GROUP }} --query [0].id -o tsv)"
            echo 'AKS_ID='$AKS_ID >> $GITHUB_ENV
            
            AKS_IDENTITY_ID="$(az identity list --resource-group ${{ env.RESOURCE_GROUP }} --query [0].clientId -o tsv)"
            echo 'AKS_IDENTITY_ID='$AKS_IDENTITY_ID >> $GITHUB_ENV
            
            APPGW_PIP="$(az network public-ip show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.APP_GATEWAY_PIP_NAME }} --query '{address: ipAddress}' -o tsv)"
            echo 'APPGW_PIP='$APPGW_PIP >> $GITHUB_ENV
            
            KEYVAULT_NAME=$(az keyvault list --resource-group ${{ env.RESOURCE_GROUP }} --query [0].name -o tsv)
            echo 'KEYVAULT_NAME='$KEYVAULT_NAME >> $GITHUB_ENV
            
            SUBNET_ID=$(az network vnet subnet show --resource-group ${{ env.RESOURCE_GROUP }} --vnet-name ${{ env.SPOKE_VNET_NAME }} --name ${{ env.SPOKE_SUBNET_NAME }} --query id --output tsv)
            echo 'SUBNET_ID='$SUBNET_ID >> $GITHUB_ENV
            
            ACR_NAME="$(az acr list --resource-group ${{ env.RESOURCE_GROUP }} --query [0].name -o tsv)"
            echo 'ACR_NAME='$ACR_NAME >> $GITHUB_ENV
            
            AKS_VERSION=$(az aks get-versions --location ${{ env.DEPLOYMENT_LOCATION }} --query "orchestrators[].orchestratorVersion | max(@)" --output tsv)
            echo 'AKS_VERSION='$AKS_VERSION >> $GITHUB_ENV
            
      - name: Set Auto-Upgrade
        uses: Azure/CLI@v1
        continue-on-error: true
        with:
          azcliversion: latest
          inlineScript: |
          
            az aks update --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --auto-upgrade-channel stable
      
      - name: Assign Permissions to GitHub Runner VM's Managed identity
        uses: Azure/CLI@v1
        if: ${{ env.AKS_ID != '' && env.GH_RUNNER_VM_MANAGED_IDENTITY_PRINCIPAL_ID != '' && env.AZURE_SUBSCRIPTION_ID != '' }}
        with:
          azcliversion: latest
          inlineScript: |
          
            # Assign Permissions to Github Self-Hosted Runner VM
            az role assignment create --assignee-principal-type ServicePrincipal --assignee-object-id ${{ env.GH_RUNNER_VM_MANAGED_IDENTITY_PRINCIPAL_ID }} --role 'Contributor' --scope '/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}'
            az role assignment create --assignee-principal-type ServicePrincipal --assignee-object-id ${{ env.GH_RUNNER_VM_MANAGED_IDENTITY_PRINCIPAL_ID }} --role "Azure Kubernetes Service RBAC Cluster Admin" --scope ${{ env.AKS_ID }}
            az role assignment create --assignee-principal-type ServicePrincipal --assignee-object-id ${{ env.GH_RUNNER_VM_MANAGED_IDENTITY_PRINCIPAL_ID }} --role 'Private DNS Zone Contributor' --scope '/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.HUB_RESOURCE_GROUP }}'
            az role assignment create --assignee-principal-type ServicePrincipal --assignee-object-id ${{ env.GH_RUNNER_VM_MANAGED_IDENTITY_PRINCIPAL_ID }} --role 'Network Contributor' --scope '/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.MANAGED_RESOURCE_GROUP }}'
            
            # Make sure user-created Managed Identity has access to AKS managed Resource Group
            az role assignment create --assignee-principal-type ServicePrincipal --assignee-object-id ${{ env.AKS_IDENTITY_ID }} --role 'Contributor' --scope '/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.MANAGED_RESOURCE_GROUP }}'
            
            # Create Access Policy on KeyVault to allow GitHub Self-hosted Runner VMs system-assigned managed identity to set secrets
            az keyvault set-policy --name ${{ env.KEYVAULT_NAME }} --object-id ${{ env.GH_RUNNER_VM_MANAGED_IDENTITY_PRINCIPAL_ID }} --secret-permissions set --resource-group ${{ env.RESOURCE_GROUP }}

      - name: Create Custom DNS
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            # Create DNS Zone
            az network private-dns zone create --resource-group ${{ env.HUB_RESOURCE_GROUP }} --name ${{ env.PRIVATE_DNS_NAME }}
            
            # Link DNS Zone to Hub VNET
            az network private-dns link vnet create --resource-group ${{ env.HUB_RESOURCE_GROUP }} --name ${{ env.PRIVATE_DNS_NAME }}-link-hub --zone ${{ env.PRIVATE_DNS_NAME }} --virtual-network ${{ env.HUB_VNET_NAME }} --registration-enabled true
            
      - name: Update Firewall to allow AKS out
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            # Allow AKS to call the front-end of our Application Gateway (for LetsEncrypt)
            az network firewall network-rule create --collection-name 'aks-egress-to-application-gateway' --destination-ports '*' --firewall-name ${{ env.FIREWALL_NAME }} --name 'Allow-AppGW' --protocols Tcp --resource-group ${{ env.HUB_RESOURCE_GROUP }} --action Allow --dest-addr '${{ env.APPGW_PIP }}' --source-addresses '${{ env.AKS_SUBNET_CIDR }}' --destination-ports '*' --priority 350
            
            # Allow AKS to get NGINX - need to allow out all HTTPS outbound to get the images: https://github.com/kubernetes/registry.k8s.io#stability
            az network firewall application-rule create --collection-name 'aks-egress' --name 'Allow-HTTPS' --target-fqdns '*' --firewall-name ${{ env.FIREWALL_NAME }} --protocols Https=443 --resource-group ${{ env.HUB_RESOURCE_GROUP }} --source-addresses '${{ env.AKS_SUBNET_CIDR }}'  --priority 350 --action Allow
            
      - name: Cap Log Analytics Workspace Ingress to save $
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            az monitor log-analytics workspace update --resource-group ${{ env.RESOURCE_GROUP }} --workspace-name ${{ env.LOG_ANALYTICS_WORKSPACE_NAME }} --quota 5

      - name: Enable Auto-Scaler on Default Node Pool to save $
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
          
            az aks nodepool update --resource-group ${{ env.RESOURCE_GROUP }} --name defaultpool --cluster-name ${{ env.CLUSTER_NAME }} --enable-cluster-autoscaler --min-count 1 --max-count 5
